{"version":3,"sources":["serviceWorker.js","App6.js","index.js"],"names":["Boolean","window","location","hostname","match","List1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newItem","state","list","values","trim","length","setState","concat","toConsumableArray","imp","status","date","Date","toString","slice","event","target","value","item","l","i","indexOf","temp","updatedList","filter","litem","_this2","map","react_default","a","createElement","className","onDoubleClick","movetop","draggable","onClick","setStatus","moveUp","moveDown","deleteItem","_this3","type","additem","onChange","e","inp","required","placeholder","max","getlist","React","Component","App","App6_List1","ReactDOM","render","App6","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e97e785f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './App.css';\r\n\r\nclass List1 extends React.Component{\r\n  newItem=\"\";\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      list: [],\r\n      values:''\r\n    }\r\n  }\r\n\r\n  \r\n  additem(){\r\n    this.newItem = this.state.values.trim();\r\n    if(this.newItem.length !== 0){\r\n      this.setState({\r\n        list : [...this.state.list,{imp: this.newItem,status:false,date: new Date().toString().slice(0,24)}],\r\n        values:'',\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        values: \"\" \r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  inp(event){\r\n    this.setState({\r\n      values: event.target.value\r\n    })\r\n  }\r\n\r\n\r\n  moveUp(item){\r\n    let l = this.state.list;\r\n    let i = l.indexOf(item);\r\n    if(i !== 0)\r\n    {\r\n      let temp = l[i];\r\n      l[i] = l[i-1];\r\n      l[i-1] = temp;\r\n      this.setState({list: l});\r\n    }\r\n  }\r\n  \r\n  moveDown(item){\r\n    let l = this.state.list;\r\n    let i = l.indexOf(item);\r\n    if(i !== l.length-1)\r\n    {\r\n      let temp = l[i];\r\n      l[i] = l[i+1];\r\n      l[i+1] = temp;\r\n      this.setState({list: l});\r\n    }\r\n  }\r\n\r\n  deleteItem(item){\r\n    let l = this.state.list;\r\n    let updatedList = l.filter((litem) => litem !== item);\r\n    this.setState({ list: updatedList });\r\n  }\r\n\r\n\r\n  movetop(item){\r\n    let l = this.state.list;\r\n    let updatedList = l.filter((litem) => litem !== item);\r\n    let m = l[l.indexOf(item)];\r\n    updatedList = [m,...updatedList];\r\n    this.setState({\r\n      list: updatedList\r\n    })\r\n  }\r\n\r\n  getlist()\r\n  {\r\n    let items=[];\r\n    items = this.state.list.map((item)=> \r\n    <div className=\"row\">\r\n      <li onDoubleClick={()=>this.movetop(item)} draggable onClick={()=>this.setStatus(item)} className={item.status ? \"paper-btn col-12 sm-8 btn-success\" : \"paper-btn col-12 sm-8\"}>{item.imp} <span className='alt'>{item.date}</span></li>\r\n      <button className={this.state.list.indexOf(item)===0 ? \"paper-btn col-3 sm-1 disabled btn-secondary\" : \"paper-btn col-1 btn-secondary\"} onClick={() => this.moveUp(item)}>Up </button>\r\n      <button className={this.state.list.indexOf(item)===(this.state.list.length-1) ? \"paper-btn col-3 sm-1 disabled btn-secondary\" : \"paper-btn col-3 sm-1 btn-secondary\"} onClick={() => this.moveDown(item)}>Down </button>\r\n      <button className=\"paper-btn col-3 sm-1 btn-danger\" onClick={() => this.deleteItem(item)}>X </button>\r\n    </div>);\r\n    return items;\r\n  }\r\n  setStatus(item){\r\n    let l = this.state.list;\r\n    let i = l.indexOf(item);\r\n    l[i].status = !l[i].status;\r\n    this.setState({list:l}); \r\n  }\r\n\r\n  render(){\r\n    return <div>\r\n      <button type='submit' onClick={()=>this.additem()} className=\"row flex-center\">Add</button>\r\n      <input type=\"text\" className=\"row flex-center\" onChange={(e)=>this.inp(e)} value={this.state.values} required placeholder=\"Item\"></input>\r\n      <h3 className=\"row flex-center\">Completed Items: {this.state.list.filter((item)=> item.status===true).length}/{this.state.list.length}</h3>\r\n      <progress value={this.state.list.filter((item)=> item.status===true).length*100/this.state.list.length} max=\"100\" className=\"row flex-center\"></progress>\r\n      <ul>{this.getlist()}</ul>\r\n      <footer className=\"row flex-center\"><b><i>Project Developed By Ankit Kumar Jangir</i></b></footer>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return <div>\r\n    <h1 className=\"row flex-center animated  bounce\">Todo List</h1>\r\n    <List1></List1>\r\n  </div>\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'papercss/dist/paper.css';\nimport 'animate.css';\n//import App from './App5';\n//import 'G:/BootCamp/React Programing/project/node_modules/bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n//import { Parent } from './App';\n//import {Parent} from './App1';\n//import {Parent} from './App2' ;\n//import {Parent}  from './App3';\n//import {Parent} from './App4';\nimport App from './App6';\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}